// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UnitTesting renders correctly 1`] = `
<div>
  <h2
    class="chakra-heading css-jmbq56"
  >
    Unit Testing
  </h2>
  <div
    class="chakra-stack css-1sam6cv"
  >
    <p
      class="chakra-text css-0"
    >
      Unit testing is a process where the smallest functional units of code are tested. These units are usually functions or methods. The goal of unit testing is to validate that each unit of the software performs as intended.
    </p>
    <p
      class="chakra-text css-0"
    >
      If there are input, output or logic-based errors in the code unit tests should help catch them before they reach production. When code is changed or refactored, unit tests can help ensure that the changes don't break the existing code.
    </p>
    <p
      class="chakra-text css-0"
    >
      Unit tests are, in addition, an important way of documenting code. Developers can read the tests and understand what behavior is expected.
    </p>
  </div>
  <h2
    class="chakra-heading css-jmbq56"
  >
    Functional Programming
  </h2>
  <div
    class="chakra-stack css-mbssy4"
  >
    <p
      class="chakra-text css-0"
    >
      Functional programming helps us understand why some code is easier to test through concepts such as pure functions and side-effects.
    </p>
    <h3
      class="chakra-heading css-0"
    >
      Pure Functions
    </h3>
    <div
      class="chakra-stack css-mbssy4"
    >
      <p
        class="chakra-text css-0"
      >
        Functions that only produce output based on their input, such as the below:
        <code
          class="chakra-code css-sef266"
        >
          const AddUp = (a: number, b: number) =&gt; a + b;
        </code>
        are extremely straightforward to test. This is because there are no implicit imputs, like the browser window or system clock. Functional programmers call this a 
        <strong>
          pure function
        </strong>
        .
      </p>
      <p
        class="chakra-text css-0"
      >
        Pure function are in addition deterministic. This means that given an input they will always return the same output. This produces unit tests that are consistent, giving additional confidence in the test suites.
      </p>
    </div>
    <h3
      class="chakra-heading css-0"
    >
      Side Effects
    </h3>
    <div
      class="chakra-stack css-mbssy4"
    >
      <p
        class="chakra-text css-0"
      >
        A function is said to have a side-effect if it uses or modifies state outside its scope. This could be:
      </p>
      <ul
        class="css-tu0njr"
        role="list"
      >
        <li
          class="css-0"
        >
          Reading or writing to a file.
        </li>
        <li
          class="css-0"
        >
          Network requests
        </li>
        <li
          class="css-0"
        >
          Using the system clock
        </li>
      </ul>
      <p
        class="chakra-text css-0"
      >
        Any tests written for functions with side-effects are non-deterministic, meaning that results depend on the time of day or the state of a network. Non-determinism in a test suite leads to intermittent failures and a loss of confidence.
      </p>
    </div>
  </div>
</div>
`;
